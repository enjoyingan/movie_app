{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenres","genre","className","MoviePoster","poster","src","alt","width","Movie","title","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","a","_callApi","movies","setState","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0VAwCA,SAASA,EAAT,GAA8B,IAARC,EAAO,EAAPA,MAClB,OACI,0BAAMC,UAAU,gBAAgBD,GAQxC,SAASE,EAAT,GAA+B,IAATC,EAAQ,EAARA,OAClB,OACI,yBAAKC,IAAKD,EAAQE,IAAK,gBAAgBC,MAAO,QAmCvCC,MAhFf,YAAkD,IAAlCC,EAAiC,EAAjCA,MAAOL,EAA0B,EAA1BA,OAAQM,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACnC,OACI,yBAAKT,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACC,EAAD,CAAaC,OAAQA,KAEzB,yBAAKF,UAAU,iBACX,4BAAKO,GACL,yBAAKP,UAAU,iBACVQ,EAAOE,KAAI,SAACX,EAAOY,GAAR,OAAkB,kBAACb,EAAD,CAAaC,MAAOA,EAAOa,IAAKD,QAGlE,6BACI,kBAAC,IAAD,CACAE,KAAMJ,EACNK,QAAS,KACTC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCmDbC,E,2MAvDbC,MAAQ,G,EAYRC,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLC,EADK,OAEX,EAAKC,SAAS,CACZD,WAHS,2C,EAObD,SAAW,WACT,OAAOG,MAAM,yDACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKN,UACvBO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAE5BG,cAAgB,WASd,OARe,EAAKf,MAAMI,OAAOb,KAAK,SAAAyB,GACpC,OAAO,kBAAC,EAAD,CACP5B,MAAO4B,EAAM5B,MACbL,OAAQiC,EAAMC,mBACdxB,IAAMuB,EAAME,GACZ7B,OAAQ2B,EAAM3B,OACdC,SAAU0B,EAAM1B,e,oFA3BlBuB,QAAQC,IAAI,gB,0CAIZK,KAAKlB,e,+BA6BL,OACE,yBAAKpB,UAAU,OACZsC,KAAKnB,MAAMI,OAASe,KAAKJ,gBAAkB,e,GAzClCK,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.fd734e06.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Movie.css';\r\nimport propTypes from 'prop-types';\r\nimport LineEllipsis from 'react-lines-ellipsis';\r\n\r\n\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} />\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenres genre={genre} key={index} />)}\r\n\r\n                </div>\r\n                <div>\r\n                    <LineEllipsis\r\n                    text={synopsis}\r\n                    maxLine ='20'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title : propTypes.string.isRequired,\r\n    poster : propTypes.string.isRequired,\r\n    genres : propTypes.array.isRequired,\r\n    synopsis : propTypes.string.isRequired\r\n\r\n}\r\nfunction MovieGenres({genre}){\r\n    return(\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovieGenres.propTypes = {\r\n    genre : propTypes.string.isRequired\r\n}\r\n\r\nfunction MoviePoster({poster}){\r\n    return(\r\n        <img src={poster} alt =\" Moive Poster\" width =\"300\" />\r\n    )\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster : propTypes.string.isRequired\r\n}\r\n// class Movie extends Component {\r\n//     static propTypes = {\r\n//         title: propTypes.string.isRequired,\r\n//         poster: propTypes.string.isRequired\r\n//     }\r\n//     render(){\r\n//         // console.log(this.props); 데이터를 받는걸 확인하기 위해 자주 쓰는 것\r\n//         return(\r\n//             <div>\r\n//                 <MoviePoster poster={this.props.poster}/>\r\n//                 <h1>{this.props.title}</h1>\r\n            \r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// class MoviePoster extends Component{\r\n//     static propTypes = {\r\n//         poster: propTypes.string.isRequired\r\n//     }\r\n//     render(){\r\n//         return(\r\n//             <img src={this.props.poster} alt=\"\" width=\"300\"></img>\r\n//         )\r\n//     }\r\n// }\r\n\r\nexport default Movie //다른 js파일에서 movie 컴포넌트를 사용할 수 있도록 export","import React, {Component} from 'react';\n\nimport './App.css';\nimport Movie from './Movie.js';\n\n// const movieTitle = [\n//   'Harry Potter',\n//   'Bugs',\n//   'Toy Story',\n//   'About Time'\n// ]\n\n// const moviePoster = [\n//   'https://www.pambazuka.org/sites/default/files/styles/flexslider_full/public/field/image/EW_Harry-Potter_Featured.jpg?itok=XphMvnG2',\n//   'https://www.cartoonson.tv/_resources/Cartoons/movie/32/image/555x418/a_bugs_life_coloring.jpg',\n//   'https://upload.wikimedia.org/wikipedia/en/thumb/1/13/Toy_Story.jpg/220px-Toy_Story.jpg',\n//   'https://i.ytimg.com/vi/u2PUMA6nFWk/maxresdefault.jpg'\n// ]\n\n\nclass App extends Component{ //component -> return -> render\n  state = {\n\n  }\n\n  componentWillMount(){\n    console.log('will mount')\n\n  }\n  componentDidMount(){\n    this._getMovies()\n  }\n\n  _getMovies = async() => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=rating')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie=>{\n      return <Movie \n      title={movie.title} \n      poster={movie.medium_cover_image} \n      key= {movie.id}\n      genres={movie.genres}\n      synopsis={movie.synopsis} />\n    }))\n    return movies\n  }\n  \n  render(){\n    return(\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n\n\n\n\n        /* <Movie title={movieTitle[0]} poster={moviePoster[0]}/>{ /* call movie component */\n        /* <Movie title={movieTitle[1]} poster={moviePoster[1]}/>\n        <Movie title={movieTitle[2]} poster={moviePoster[2]}/>\n        <Movie title={movieTitle[3]} poster={moviePoster[3]}/> */\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}